image: docker:stable

variables:
  DOCKER_DRIVER: overlay2

services:
  - name: docker:20.10.16-dind
    alias: docker

.run_template: &run
  before_script:
  - apk add --update curl python3 && rm -rf /var/cahe/apk/*
  - docker load < student-list-api.tar
  - docker rm -vf student-list-website || echo "website container already deleted"
  - docker rm -vf student-list-api || echo "api container already deleted"
  - docker run -d --name=student-list-api -p 5000:5000 student-list-api
  - docker cp ${PWD}/simple_api/student_age.json student-list-api:/data/student_age.json
  - sleep 5
  - docker run -d --name=student-list-website --link student-list-api:api-pozos -p 8080:80 php:apache
  - docker exec student-list-website  sh -c 'rm -rf /var/www/html/index.html'
  - docker cp ${PWD}/website/index.php student-list-website:/var/www/html/
  - if [ $CI_RUNNER_TAGS == \[\"docker-runner\"\] ] ; then backend=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' student-list-api); frontend=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' student-list-website); echo "use local runner"; else backend=docker; frontend=docker:8080 ; echo "use gitlab saas runner"; fi
  after_script:
  - docker rm -vf student-list-website || echo "website container already deleted"
  - docker rm -vf student-list-api || echo "api container already deleted"
  

.precommit_template: &precommit
  image: python:3.8-bullseye
  before_script:
  - pip3 install pre-commit==3.3.3
  - apt install -y git


stages:

  - Lint code app
  - Lint code infra
  - Build image
  - Test image
  - Scan Secret App
  - Scan Infra App
  - Push To Docker Hub
  - Deploy App


.php lint:
  stage: Lint code app
  <<: *precommit
  script:
  - apt update && apt install -y software-properties-common ca-certificates lsb-release apt-transport-https && echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list && wget -qO - https://packages.sury.org/php/apt.gpg | apt-key add - && apt update
  - apt install php8.2 -y 
  - pre-commit run php-lint-all


python lint:
  stage: Lint code app
  image: python
  before_script:
  - pip install flake8
  script:
  - flake8 simple_api/student_age.py --ignore=E501


docker lint:
  stage: Lint code infra
  image: hadolint/hadolint:2.9.2-debian
  script:
    - hadolint --failure-threshold error simple_api/Dockerfile



docker build:
  stage: Build image
  script:
  - docker info
  - docker build --no-cache -t student-list-api ./simple_api
  - docker save student-list-api > student-list-api.tar
  artifacts:
    paths:
      - student-list-api.tar


docker test:
  stage: Test image
  <<: *run
  script:
  - (curl $frontend | grep -q "Student Checking App") || echo "website KO"
  - if [ "$(curl -u toto:python -X GET http://$backend:5000/pozos/api/v1.0/get_student_ages | python3 -c "import sys, json; print(json.load(sys.stdin)['student_ages']['bob'])")" = "13" ] && [ "$(curl -u toto:python -X GET http://$backend:5000/pozos/api/v1.0/get_student_ages | python3 -c "import sys, json; print(json.load(sys.stdin)['student_ages']['alice'])")" = "12" ]; then echo "test OK"; exit 0; else echo "test KO"; exit 1; fi
  

.checkov_pod: 
  stage: Security
  image: python:3 
  before_script: 
    - pip3 install checkov==2.2.180 
  script: 
    - checkov --file exemple-pod.yaml 
  allow_failure: false

secret scan:
  stage: Scan Secret App
  image: golang:latest
  before_script:
    - git clone https://github.com/trufflesecurity/trufflehog.git
    - cd trufflehog
    - go install
  script:
    - trufflehog git $CI_REPOSITORY_URL --since-commit HEAD --only-verified --fail

  
apache scan:
  stage: Scan Infra App
  <<: *run
  script:
  - git clone  https://github.com/sullo/nikto
  - cd nikto/program
  - git checkout nikto-2.5.0
  - ./nikto.pl -h http://${frontend} -nointeractive -o ../../frontend-apache-report.xml || echo "scan completed"
  artifacts:
    paths:
      - frontend-apache-report.xml


.python sca:
  stage: Scan App
  <<: *precommit
  script:
  - git ls-files -- simple_api/requirements.txt | xargs pre-commit run python-safety-dependencies-check --files

.python sast:
  stage: Scan App
  <<: *precommit
  script:
    - git ls-files -- simple_api/student_age.py | xargs pre-commit run bandit --files

.docker scan:
  stage: Scan App
  variables:
    image: student-list-api
  only:
  - main
  before_script:
  - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
  - echo $TRIVY_VERSION
  - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  script:
  - docker load < student-list-api.tar
  # Build report
  - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/junit.tpl" -o gl-container-scanning-report.xml $image
  # Print report
  - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $image
  # Fail on severe vulnerabilities
  #- echo -e "CVE-2023-30861\nCVE-2023-25577\nCVE-2022-29361" > .trivyignore
  - ./trivy image --exit-code 1 --cache-dir .trivycache/ --vuln-type library --severity CRITICAL --no-progress $image
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      junit:
        - gl-container-scanning-report.xml





docker push:
  stage: Push To Docker Hub
  only:
  - main
  script:
  - docker load < student-list-api.tar
  - docker tag student-list-api $DOCKER_USERNAME/student-list-api:${CI_COMMIT_REF_NAME}
  - docker tag student-list-api $DOCKER_USERNAME/student-list-api:${CI_COMMIT_SHORT_SHA}
  - docker tag student-list-api $DOCKER_USERNAME/student-list-api:latest
  - echo $DOCKER_PASSWORD | docker login -u$DOCKER_USERNAME --password-stdin
  - docker push $DOCKER_USERNAME/student-list-api:${CI_COMMIT_REF_NAME}
  - docker push $DOCKER_USERNAME/student-list-api:${CI_COMMIT_SHORT_SHA}
  - docker push $DOCKER_USERNAME/student-list-api:latest



docker deploy:
  stage: Deploy App
  environment:
    name: prod
    url: $NGROK_HTTP_URL
  before_script:
  - apk add --update sshpass openssh curl
  - rm student-list-api.tar README.md  frontend-apache-report.xml || echo "Files deleted"
  - echo -e "USERNAME=${API_LOGIN}\nPASSWORD=${API_PASSWORD}\nIMAGE_NAME=$DOCKER_USERNAME/student-list-api:${CI_COMMIT_SHORT_SHA}" > .env
  script:
  - SSH_HOST=$(echo "$NGROK_SSH_URL" | awk -F/ '{print $3}' | sed 's/:.*//')
  - SSH_PORT=$(echo "$NGROK_SSH_URL" | awk -F/ '{print $3}' | cut -f2 -d ':')
  - sshpass -p "$SSH_PASSWORD" ssh -o 'StrictHostKeyChecking=no' -p $SSH_PORT $SSH_LOGIN@$SSH_HOST '(mkdir -p ~/prod)'
  - sshpass -p "$SSH_PASSWORD" scp -o 'StrictHostKeyChecking=no' -P $SSH_PORT -r ./* $SSH_LOGIN@$SSH_HOST:/home/vagrant/prod/
  - sshpass -p "$SSH_PASSWORD" ssh -o 'StrictHostKeyChecking=no' -p $SSH_PORT $SSH_LOGIN@$SSH_HOST '(cd ~/prod; docker compose down -v && docker compose pull && docker compose up -d)'
  - sleep 10
  - curl "$NGROK_HTTP_URL" | tac | tac | grep -q "Student Checking App"


dast:
  image: owasp/zap2docker-stable
  stage: Deploy App
  needs: ["docker deploy"]
  variables:
    website: $NGROK_HTTP_URL
  script:
  - mkdir /zap/wrk/
  - /zap/zap-full-scan.py -J gl-dast-report.json -t $website || true
  - cp /zap/wrk/gl-dast-report.json .
  artifacts:
    paths: [gl-dast-report.json]
